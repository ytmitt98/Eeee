        if tpwalking then
            local player = game:GetService("Players").LocalPlayer
            local function startTPWalk(character)
                local humanoid = character:WaitForChild("Humanoid")
                tpConnection = game:GetService("RunService").Heartbeat:Connect(function(delta)
                    if tpwalking and humanoid and character.Parent then
                        if humanoid.MoveDirection.Magnitude > 0 then
                            character:TranslateBy(humanoid.MoveDirection * delta * 40)
                        end
                    end
                end)
            end

            player.CharacterAdded:Connect(startTPWalk)
            if player.Character then
                startTPWalk(player.Character)
            end
        else
            if tpConnection then
                tpConnection:Disconnect()
                tpConnection = nil
            end
        end
    end,
})

--// Eggs Tab
local EggsTab = Window:CreateTab("Eggs", 4483362458)

local autoHatch = false
local selectedEgg = "Egg_1_1"

EggsTab:CreateDropdown({
    Name = "Select Egg",
    Options = {"Egg_1_1", "Egg_1_2", "Egg_1_3", "Egg_1_5"},
    CurrentOption = "Egg_1_1",
    Callback = function(Value)
        selectedEgg = Value
    end,
})

EggsTab:CreateToggle({
    Name = "Auto Hatch",
    CurrentValue = false,
    Callback = function(Value)
        autoHatch = Value
        task.spawn(function()
            while autoHatch do
                local args = {selectedEgg, 1}
                local HatchService = game:GetService("ReplicatedStorage")
                    :WaitForChild("Packages")
                    :WaitForChild("_Index")
                    :WaitForChild("sleitnick_knit@1.5.1")
                    :WaitForChild("knit")
                    :WaitForChild("Services")
                    :WaitForChild("EggHatchService")
                    :WaitForChild("RE")
                    :WaitForChild("Hatch")
                HatchService:FireServer(unpack(args))
                task.wait(1)
            end
        end)
    end,
})
